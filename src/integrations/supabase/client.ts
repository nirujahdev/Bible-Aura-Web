// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://foleepziqgrdgkljedux.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZvbGVlcHppcWdyZGdrbGplZHV4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIwNzkxNTgsImV4cCI6MjA2NzY1NTE1OH0.XyTKj6ayTYWnoJRUrkKyuNlQSfE6PMGeBHDdafqMs9g";

// Enhanced validation and debugging
console.log('🔧 Supabase Configuration:', {
  url: SUPABASE_URL ? 'SET' : 'USING_FALLBACK',
  key: SUPABASE_PUBLISHABLE_KEY ? 'SET' : 'USING_FALLBACK',
  environment: import.meta.env.MODE
});

// Log warnings for missing environment variables (non-blocking)
if (!import.meta.env.VITE_SUPABASE_URL) {
  console.warn('⚠️ Using fallback SUPABASE_URL - consider setting VITE_SUPABASE_URL');
}

if (!import.meta.env.VITE_SUPABASE_ANON_KEY) {
  console.warn('⚠️ Using fallback SUPABASE_ANON_KEY - consider setting VITE_SUPABASE_ANON_KEY');
}

// Enhanced detection for auth-related URLs
const isFromEmailLink = typeof window !== 'undefined' && (() => {
  const hash = window.location.hash;
  const search = window.location.search;
  
  // Check for various auth URL patterns
  const authParams = [
    'access_token',
    'refresh_token',
    'token_hash',
    'type=recovery',
    'type=email_change', 
    'type=signup',
    'type=invite',
    'type=magiclink',
    'error=',
    'error_code=',
    'error_description='
  ];
  
  return authParams.some(param => hash.includes(param) || search.includes(param));
})();

// Enhanced Supabase client configuration
export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    // Enable session persistence for better UX and to prevent white screens
    persistSession: true,
    
    // Enable auto refresh for seamless authentication
    autoRefreshToken: true,
    
    // Always detect auth sessions in URL for magic links and OAuth
    detectSessionInUrl: true,
    
    // Use PKCE flow for better security
    flowType: 'pkce',
    
    // Enhanced debug mode for development
    debug: import.meta.env.DEV ? true : false,
    
    // Storage key prefix for multi-tenancy support
    storageKey: 'sb-bible-aura-auth-token'
  },
  
  global: {
    headers: {
      'X-Client-Info': 'bible-aura-web',
      'X-Client-Version': '2.0.0'
    }
  },
  
  db: {
    schema: 'public'
  },
  
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced error handling and logging for development
if (import.meta.env.DEV) {
  // Add auth state change logging for debugging
  supabase.auth.onAuthStateChange((event, session) => {
    console.log('🔐 Supabase Auth Event:', event, {
      hasSession: !!session,
      hasUser: !!session?.user,
      isFromEmailLink,
      url: window.location.href
    });
  });
}

// Export auth detection helper
export { isFromEmailLink };

// Helper function to check if user is authenticated
export const getAuthUser = () => {
  return supabase.auth.getUser();
};

// Helper function to get current session
export const getSession = () => {
  return supabase.auth.getSession();
};

// Helper function to sign out and clear all auth data
export const signOut = async () => {
  try {
    await supabase.auth.signOut();
    
    // Clear any additional auth-related localStorage items
    if (typeof window !== 'undefined') {
      const keysToRemove = Object.keys(localStorage).filter(key => 
        key.startsWith('sb-') || key.includes('auth') || key.includes('session')
      );
      keysToRemove.forEach(key => localStorage.removeItem(key));
    }
  } catch (error) {
    console.error('Error during sign out:', error);
    throw error;
  }
};